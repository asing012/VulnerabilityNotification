# Fetch latest updated CVEs with known exploits


import requests
import os
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import Mail
import dateutil.parser
from datetime import date
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import os
import time


dateList=[]
#email recipients 
to_emails = [
('test@test.com', 'test'),
('test@test.com', 'test')
]
#making API call
print("Making API Call")
URL = "http://cve.circl.lu/api/last"
req = requests.get(url = URL)
data = req.json()
count = len(data)

writeFile = open("data.txt", "w+")
today = date.today()

print("Starting Selenium Headless")
#Creating WebDriver for Selenium
options = Options()
options.add_argument("--headless")
options.add_argument("--window-size=1920x1080")

chrome_driver = os.getcwd() +"/chromedriver"

driver = webdriver.Chrome(options=options, executable_path=chrome_driver)
print("Making a GET request to www.exploit-db.com")
driver.get("https://www.exploit-db.com/search?cve=2019-1234")

#extracting published time, id, references, and summary
for i in range(0, count):
#formatting date and appending it in the dateList
    shortCVE = data[i]['id'].strip('CVE-')
    publishedTime = data[i]['Published']
    rawDate = dateutil.parser.parse(publishedTime)
    if(str(rawDate.date()) == str(today)):
        print(shortCVE)
        dateList.append(rawDate.date())
        #Selenium Code
        driver.find_element_by_id('cveSearch').clear()
        inputElement = driver.find_element_by_id("cveSearch")
        inputElement.send_keys(str(shortCVE))
        inputElement.submit()

        time.sleep(4)

        exploitDBID = driver.find_element_by_class_name("dataTables_info").text
        # writing data into "data.txt" file
        if str(exploitDBID) == "Showing 0 to 0 of 0 entries":
            #print("NA"+" "+str(shortCVE))
            writeFile.write(str(data[i]['id'])+"<br>"+"Published on - "+str(dateList[i])+"<br>"+"Summary - "+str(data[i]['summary']).replace("'", '"')+"<br>"+"Reference - "+str(data[i]['references']).replace("[","").replace("'","").replace("'","").replace("]","")+"<br>"+"ExploitDB - Not Available"+"<br>"+"<br>")
        else:
            #print("https://www.exploit-db.com/search?cve="+str(shortCVE))
            writeFile.write(str(data[i]['id'])+"<br>"+"Published on - "+str(dateList[i])+"<br>"+"Summary - "+str(data[i]['summary'])+"<br>"+"Reference - "+str(data[i]['references']).replace("[","").replace("'","").replace("'","").replace("]","")+"<br>"+"ExploitDB - https://www.exploit-db.com/search?cve="+str(shortCVE)+"<br>"+"<br>")
    else:
        print("No latest CVE's today")
        quit()

print("Completed writing extracted details to the data.txt file")
writeFile.close()
#a = a.replace('"', "'") 
readFile = open("data.txt", "r")
fileData = readFile.read()
readFile.close()


#sending email
print("Sending Email")
message = Mail(
    from_email='test@test.com',
    to_emails=to_emails,
    subject='Latest updated CVEs',
    html_content=fileData)
try:
    sg = SendGridAPIClient(os.environ.get('SENDGRID_API_KEY'))
    response = sg.send(message)
    print(response.status_code)
except Exception as e:
    print(e.message)

